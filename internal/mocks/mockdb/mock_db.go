// Code generated by mockery v2.52.2. DO NOT EDIT.

package mockdb

import (
	models "simple-file-processor/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

type Database_Expecter struct {
	mock *mock.Mock
}

func (_m *Database) EXPECT() *Database_Expecter {
	return &Database_Expecter{mock: &_m.Mock}
}

// InsertFileMetadata provides a mock function with given fields: _a0
func (_m *Database) InsertFileMetadata(_a0 *models.File) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InsertFileMetadata")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.File) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_InsertFileMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertFileMetadata'
type Database_InsertFileMetadata_Call struct {
	*mock.Call
}

// InsertFileMetadata is a helper method to define mock.On call
//   - _a0 *models.File
func (_e *Database_Expecter) InsertFileMetadata(_a0 interface{}) *Database_InsertFileMetadata_Call {
	return &Database_InsertFileMetadata_Call{Call: _e.mock.On("InsertFileMetadata", _a0)}
}

func (_c *Database_InsertFileMetadata_Call) Run(run func(_a0 *models.File)) *Database_InsertFileMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.File))
	})
	return _c
}

func (_c *Database_InsertFileMetadata_Call) Return(_a0 error) *Database_InsertFileMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_InsertFileMetadata_Call) RunAndReturn(run func(*models.File) error) *Database_InsertFileMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// Migrate provides a mock function with no fields
func (_m *Database) Migrate() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Migrate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_Migrate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Migrate'
type Database_Migrate_Call struct {
	*mock.Call
}

// Migrate is a helper method to define mock.On call
func (_e *Database_Expecter) Migrate() *Database_Migrate_Call {
	return &Database_Migrate_Call{Call: _e.mock.On("Migrate")}
}

func (_c *Database_Migrate_Call) Run(run func()) *Database_Migrate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_Migrate_Call) Return(_a0 error) *Database_Migrate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Migrate_Call) RunAndReturn(run func() error) *Database_Migrate_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
