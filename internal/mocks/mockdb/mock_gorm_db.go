// Code generated by mockery v2.52.2. DO NOT EDIT.

package mockdb

import (
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// GormDB is an autogenerated mock type for the GormDB type
type GormDB struct {
	mock.Mock
}

type GormDB_Expecter struct {
	mock *mock.Mock
}

func (_m *GormDB) EXPECT() *GormDB_Expecter {
	return &GormDB_Expecter{mock: &_m.Mock}
}

// AutoMigrate provides a mock function with given fields: _a0
func (_m *GormDB) AutoMigrate(_a0 ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AutoMigrate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(_a0...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GormDB_AutoMigrate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AutoMigrate'
type GormDB_AutoMigrate_Call struct {
	*mock.Call
}

// AutoMigrate is a helper method to define mock.On call
//   - _a0 ...interface{}
func (_e *GormDB_Expecter) AutoMigrate(_a0 ...interface{}) *GormDB_AutoMigrate_Call {
	return &GormDB_AutoMigrate_Call{Call: _e.mock.On("AutoMigrate",
		append([]interface{}{}, _a0...)...)}
}

func (_c *GormDB_AutoMigrate_Call) Run(run func(_a0 ...interface{})) *GormDB_AutoMigrate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *GormDB_AutoMigrate_Call) Return(_a0 error) *GormDB_AutoMigrate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GormDB_AutoMigrate_Call) RunAndReturn(run func(...interface{}) error) *GormDB_AutoMigrate_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: _a0
func (_m *GormDB) Create(_a0 interface{}) *gorm.DB {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(interface{}) *gorm.DB); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// GormDB_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type GormDB_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 interface{}
func (_e *GormDB_Expecter) Create(_a0 interface{}) *GormDB_Create_Call {
	return &GormDB_Create_Call{Call: _e.mock.On("Create", _a0)}
}

func (_c *GormDB_Create_Call) Run(run func(_a0 interface{})) *GormDB_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *GormDB_Create_Call) Return(_a0 *gorm.DB) *GormDB_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GormDB_Create_Call) RunAndReturn(run func(interface{}) *gorm.DB) *GormDB_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Model provides a mock function with given fields: value
func (_m *GormDB) Model(value interface{}) *gorm.DB {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for Model")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(interface{}) *gorm.DB); ok {
		r0 = rf(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// GormDB_Model_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Model'
type GormDB_Model_Call struct {
	*mock.Call
}

// Model is a helper method to define mock.On call
//   - value interface{}
func (_e *GormDB_Expecter) Model(value interface{}) *GormDB_Model_Call {
	return &GormDB_Model_Call{Call: _e.mock.On("Model", value)}
}

func (_c *GormDB_Model_Call) Run(run func(value interface{})) *GormDB_Model_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *GormDB_Model_Call) Return(_a0 *gorm.DB) *GormDB_Model_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GormDB_Model_Call) RunAndReturn(run func(interface{}) *gorm.DB) *GormDB_Model_Call {
	_c.Call.Return(run)
	return _c
}

// NewGormDB creates a new instance of GormDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGormDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *GormDB {
	mock := &GormDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
