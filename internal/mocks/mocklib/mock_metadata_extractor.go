// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocklib

import (
	lib "simple-file-processor/internal/lib"

	mock "github.com/stretchr/testify/mock"
)

// MetadataExtractor is an autogenerated mock type for the MetadataExtractor type
type MetadataExtractor struct {
	mock.Mock
}

type MetadataExtractor_Expecter struct {
	mock *mock.Mock
}

func (_m *MetadataExtractor) EXPECT() *MetadataExtractor_Expecter {
	return &MetadataExtractor_Expecter{mock: &_m.Mock}
}

// ExtractVideoMetadata provides a mock function with given fields: path
func (_m *MetadataExtractor) ExtractVideoMetadata(path string) (*lib.VideoMetadata, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for ExtractVideoMetadata")
	}

	var r0 *lib.VideoMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*lib.VideoMetadata, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) *lib.VideoMetadata); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lib.VideoMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MetadataExtractor_ExtractVideoMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractVideoMetadata'
type MetadataExtractor_ExtractVideoMetadata_Call struct {
	*mock.Call
}

// ExtractVideoMetadata is a helper method to define mock.On call
//   - path string
func (_e *MetadataExtractor_Expecter) ExtractVideoMetadata(path interface{}) *MetadataExtractor_ExtractVideoMetadata_Call {
	return &MetadataExtractor_ExtractVideoMetadata_Call{Call: _e.mock.On("ExtractVideoMetadata", path)}
}

func (_c *MetadataExtractor_ExtractVideoMetadata_Call) Run(run func(path string)) *MetadataExtractor_ExtractVideoMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MetadataExtractor_ExtractVideoMetadata_Call) Return(_a0 *lib.VideoMetadata, _a1 error) *MetadataExtractor_ExtractVideoMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MetadataExtractor_ExtractVideoMetadata_Call) RunAndReturn(run func(string) (*lib.VideoMetadata, error)) *MetadataExtractor_ExtractVideoMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// NewMetadataExtractor creates a new instance of MetadataExtractor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetadataExtractor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetadataExtractor {
	mock := &MetadataExtractor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
