// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocktasks

import (
	models "simple-file-processor/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// Resizer is an autogenerated mock type for the Resizer type
type Resizer struct {
	mock.Mock
}

type Resizer_Expecter struct {
	mock *mock.Mock
}

func (_m *Resizer) EXPECT() *Resizer_Expecter {
	return &Resizer_Expecter{mock: &_m.Mock}
}

// ResizeImage provides a mock function with given fields: sp, fn, w, h
func (_m *Resizer) ResizeImage(sp string, fn string, w int, h int) (models.ProcessedOutput, error) {
	ret := _m.Called(sp, fn, w, h)

	if len(ret) == 0 {
		panic("no return value specified for ResizeImage")
	}

	var r0 models.ProcessedOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, int) (models.ProcessedOutput, error)); ok {
		return rf(sp, fn, w, h)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int) models.ProcessedOutput); ok {
		r0 = rf(sp, fn, w, h)
	} else {
		r0 = ret.Get(0).(models.ProcessedOutput)
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int) error); ok {
		r1 = rf(sp, fn, w, h)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Resizer_ResizeImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResizeImage'
type Resizer_ResizeImage_Call struct {
	*mock.Call
}

// ResizeImage is a helper method to define mock.On call
//   - sp string
//   - fn string
//   - w int
//   - h int
func (_e *Resizer_Expecter) ResizeImage(sp interface{}, fn interface{}, w interface{}, h interface{}) *Resizer_ResizeImage_Call {
	return &Resizer_ResizeImage_Call{Call: _e.mock.On("ResizeImage", sp, fn, w, h)}
}

func (_c *Resizer_ResizeImage_Call) Run(run func(sp string, fn string, w int, h int)) *Resizer_ResizeImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *Resizer_ResizeImage_Call) Return(_a0 models.ProcessedOutput, _a1 error) *Resizer_ResizeImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Resizer_ResizeImage_Call) RunAndReturn(run func(string, string, int, int) (models.ProcessedOutput, error)) *Resizer_ResizeImage_Call {
	_c.Call.Return(run)
	return _c
}

// NewResizer creates a new instance of Resizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Resizer {
	mock := &Resizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
